import java_cup.runtime.*;
import java.util.Stack;
import java.io.*;

parser code {:
	public static void main(String args[]) throws Exception {
		new parser(new Yylex(System.in)).parse();
	}
	
	public void syntax_error(Symbol s){
    	System.out.println("compiler has detected a syntax error at line " + s.left + " column " + s.right);
	}
:}

action code {:
	static final String TYPE_APPAREIL = "TypeAppareil";

	Stack<String> stack = new Stack();
	// Gets cleared after each statement
	Stack<String> identifierStack = new Stack();
	boolean programme_domus = false;
	String currentClass;
	String typeClass;

	public void setClass(String className, String classType) {
		currentClass = className;
		typeClass = TYPE_APPAREIL + "." + classType.toUpperCase();
	}

	static final String FILE_NAME = "CMaisonUser.java";

	public void createFile() throws IOException {
		BufferedWriter writer = new BufferedWriter(new FileWriter(FILE_NAME));
		writer.write("");
		writer.close();
	}

	public void append(String text) throws IOException {
		BufferedWriter writer = new BufferedWriter(new FileWriter(FILE_NAME, true));
		writer.append(text);
		writer.close();
	}

	public void appendln(String text) throws IOException {
		BufferedWriter writer = new BufferedWriter(new FileWriter(FILE_NAME, true));
		writer.append(text);
		writer.append("\n");
		writer.close();
	}
:}

terminal PROGRAMME_DOMUS_OPEN_TAG, PROGRAMME_DOMUS_CLOSE_TAG,
 DECLARATION_APPAREILS_OPEN_TAG, DECLARATION_APPAREILS_CLOSE_TAG,
 DECLARATION_INTERFACE_OPEN_TAG, DECLARATION_INTERFACE_CLOSE_TAG,
 DECLARATION_SCENARII_OPEN_TAG, DECLARATION_SCENARII_CLOSE_TAG,
 DECLARATION_COMMANDES_OPEN_TAG, DECLARATION_COMMANDES_CLOSE_TAG,
 
 DEFINIR, EXECUTOR_SCENARIO, ASSOCIER, PROGRAMMER, MESSAGE, POURTOUT,
 FAIRE, FAIT, SI, ALORS, SINON, FSI, OUVERIR, FERMER, ETEINDRE, ALLUMER,
 TASMISER, ETAT, ALLUMER_PARTIEL, ALLUMER_ECO, OUVERIR_PARTIEL, ALLUME, ETEIN,
 DEMI, ECO, OUVERT, FERME, ECLAIRAGE, VOLET, CHAUFFAGE, ALARME, FENETRE, AUTRE_APPAREIL,
 INTERRUPTEUR, MOBILE, TELEPHONE, TELECOMMANDE, TABLETTE, TV, HIFI, CAFETIERE, VIDEO_PROJ,
 LAVE_VAISSELLE, LAVE_LINGE, SECHE_LINGE, ORDINATEUR, PORTAIL,

 DOT, COMMA, COLON, ASSIGN, SEMI_COLON, CURLY_BRACKET_OPEN, CURLY_BRACKET_CLOSE, EQUALS, PARANTHESES_OPEN, PARANTHESES_CLOSE;

terminal String SCENARIO_OPEN_TAG,SCENARIO_CLOSE_TAG, IDENTIFIER, LINE_COMMENT, BLOCK_COMMENT;

non terminal expr, list, item;

expr	::= list {:
	System.out.println("\n\nAnalyse terminee!");
:} | {: System.out.println("Entree vide!"); :};

list ::= item list | item;

// COMMENTS
item ::= LINE_COMMENT:s {: appendln(s); :};
item ::= BLOCK_COMMENT:s {: appendln(s); :};

// TAGS
item ::= PROGRAMME_DOMUS_OPEN_TAG:s {:
	if(!stack.isEmpty()) {
		throw new Exception("DOMUS program should start with PROGRAMME_DOMUS_OPEN_TAG");
	}

	stack.push("PROGRAMME_DOMUS_OPEN_TAG");
	createFile();
:};
item ::= PROGRAMME_DOMUS_CLOSE_TAG:s {: 
	if(stack.isEmpty() || stack.pop() != "PROGRAMME_DOMUS_OPEN_TAG") {
		throw new Exception("Missing PROGRAMME_DOMUS_OPEN_TAG");
	}
:};

item ::= DECLARATION_APPAREILS_OPEN_TAG:s {: 
	System.out.println();
	stack.push("DECLARATION_APPAREILS_OPEN_TAG");
:};
item ::= DECLARATION_APPAREILS_CLOSE_TAG:s {:
	if(stack.isEmpty() || stack.pop() != "DECLARATION_APPAREILS_OPEN_TAG") {
		throw new Exception("Missing DECLARATION_APPAREILS_OPEN_TAG");
	}
:};

item ::= DECLARATION_INTERFACE_OPEN_TAG:s {:
	System.out.println();
	stack.push("DECLARATION_INTERFACE_OPEN_TAG");
:};
item ::= DECLARATION_INTERFACE_CLOSE_TAG:s {:
	if(stack.isEmpty() || stack.pop() != "DECLARATION_INTERFACE_OPEN_TAG") {
		throw new Exception("Missing DECLARATION_INTERFACE_OPEN_TAG");
	}
:};

item ::= DECLARATION_SCENARII_OPEN_TAG:s {:
	System.out.println();
	stack.push("DECLARATION_SCENARII_OPEN_TAG");
:};
item ::= DECLARATION_SCENARII_CLOSE_TAG:s {:
	if(stack.isEmpty() || stack.pop() != "DECLARATION_SCENARII_OPEN_TAG") {
		throw new Exception("Missing DECLARATION_SCENARII_OPEN_TAG");
	}
:};

item ::= SCENARIO_OPEN_TAG:s {:
	System.out.println();
	stack.push("SCENARIO_OPEN_TAG");
:};
item ::= SCENARIO_CLOSE_TAG:s {:
	if(stack.isEmpty() || stack.pop() != "SCENARIO_OPEN_TAG") {
		throw new Exception("Missing SCENARIO_OPEN_TAG");
	}
:};

item ::= DECLARATION_COMMANDES_OPEN_TAG:s {:
	System.out.println();
	stack.push("DECLARATION_COMMANDES_OPEN_TAG");
:};
item ::= DECLARATION_COMMANDES_CLOSE_TAG:s {:
	if(stack.isEmpty() || stack.pop() != "DECLARATION_COMMANDES_OPEN_TAG") {
		throw new Exception("Missing DECLARATION_COMMANDES_OPEN_TAG");
	}
:};

// PUNCTUATIONS
item ::= COMMA {:
	identifierStack.pop();
:};
item ::= DOT {: currentClass = ""; typeClass = ""; identifierStack.clear(); :};
item ::= ASSIGN {::};

item ::= CURLY_BRACKET_OPEN {:
	stack.push("{");
:};
item ::= CURLY_BRACKET_CLOSE {:
	if(stack.isEmpty() || stack.pop() != "{") {
		throw new Exception("Missing curly bracket {");
	}
:};

item ::= PARANTHESES_OPEN {:
	stack.push("(");
:};
item ::= PARANTHESES_CLOSE {:
	if(stack.isEmpty() || stack.pop() != "(") {
		throw new Exception("Missing paranthese (");
	}
:};

// CLASSES
item ::= ECLAIRAGE:n {: setClass("CEclairage", (String) n); :};
item ::= VOLET:n {: setClass("CVoletFenetre", (String) n); :};
item ::= CHAUFFAGE:n {: setClass("CChauffage", (String) n); :};
item ::= ALARME:n {: setClass("CAlarme", (String) n); :};
item ::= FENETRE:n {: setClass("CVoletFenetre", (String) n); :};
item ::= AUTRE_APPAREIL:n {: setClass("CAutreAppareil", (String) n); :};

item ::= CAFETIERE {: typeClass += "_CAFE"; :};
item ::= HIFI {: typeClass += "_HIFI"; :};



// keys
item ::= DEFINIR {:
	if(stack.contains("DECLARATION_APPAREILS_OPEN_TAG")) {
		currentClass = "CEnsAppareil";
	}
:};


item ::= IDENTIFIER:s {:
	identifierStack.push(s);
	
	if(currentClass != "") {
		if(identifierStack.size() < 2) {
			append(currentClass + " " + s + " = new " + currentClass);
		}

		if(currentClass == "CEnsAppareil") {
			appendln(identifierStack.get(0) + ".addAppareil(" + s + ");");
		} else {
			appendln("(\"" + s + "\", " + typeClass + ");");
		}

		if(identifierStack.get(0) == s) {
			appendln("ma_liste_appareils.add(" + identifierStack.get(0) + ");");
		}
	}
:};

