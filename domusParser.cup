import java_cup.runtime.*;
import java.util.*;

parser code {:
	public static void main(String args[]) throws Exception {
		new parser(new Yylex(System.in)).parse();
	}
	
	public void syntax_error(Symbol s) {
    	System.out.println("compiler has detected a syntax error at line " + getLine() + " column " + getColumn());
		System.out.println(getText());
	}

	public int getLine() {
		return ((Yylex) getScanner()).getLine();
	}

	public int getColumn() {
		return ((Yylex) getScanner()).getColumn();
	}
	
	public String getText() {
		return ((Yylex) getScanner()).getText();
	}
:}

action code {:
	Writer writer = new Writer("CMaisonUser.java");
	Hashtable< String, String > table = new Hashtable< String, String >();
	Stack<String> stack = new Stack<String>();
:}

terminal PROGRAMME_DOMUS_OPEN_TAG, PROGRAMME_DOMUS_CLOSE_TAG,
 DECLARATION_APPAREILS_OPEN_TAG, DECLARATION_APPAREILS_CLOSE_TAG,
 DECLARATION_INTERFACE_OPEN_TAG, DECLARATION_INTERFACE_CLOSE_TAG,
 DECLARATION_SCENARII_OPEN_TAG, DECLARATION_SCENARII_CLOSE_TAG,
 DECLARATION_COMMANDES_OPEN_TAG, DECLARATION_COMMANDES_CLOSE_TAG,
 
 DEFINIR, EXECUTOR_SCENARIO, ASSOCIER, PROGRAMMER, MESSAGE, POURTOUT,
 FAIRE, FAIT, SI, ALORS, SINON, FSI, OUVRIR, FERMER, ETEINDRE, ALLUMER,
 TAMISER, ETAT, ALLUMER_PARTIEL, ALLUMER_ECO, OUVRIR_PARTIEL, ALLUME, ETEINT,
 DEMI, ECO, OUVERT, FERME, TABLETTE, TV, HIFI, CAFETIERE, VIDEO_PROJ,
 LAVE_VAISSELLE, LAVE_LINGE, SECHE_LINGE, ORDINATEUR, PORTAIL,

 DOT, COMMA, COLON, ASSIGN, SEMI_COLON, CURLY_BRACKET_OPEN, CURLY_BRACKET_CLOSE, EQUALS, PARANTHESES_OPEN, PARANTHESES_CLOSE;

terminal String SCENARIO_OPEN_TAG,SCENARIO_CLOSE_TAG, IDENTIFIER, LINE_COMMENT, BLOCK_COMMENT, STRING_LITERAL, DATE;
// appareils
terminal String ECLAIRAGE, VOLET, CHAUFFAGE, ALARME, FENETRE, AUTRE_APPAREIL;
// interface
terminal String INTERRUPTEUR, MOBILE, TELEPHONE, TELECOMMANDE;

non terminal expr, list, item;
non terminal appareils_subitem, interfaces_subitem, autre_appareils_subitem, definir_subitem;
non terminal pourtout_subitem, pourtout_action, si_subitem, sinon_subitem, message_subitem, programmer_subset, associer_subitem;
non terminal appareils, autre_appareils, interfaces, actions, states;

expr ::= list {:
	System.out.println("\n\nAnalyse terminee!");
:} | {: System.out.println("Entree vide!"); :};

list ::= item list | item;

// COMMENTS
item ::= LINE_COMMENT:s {: writer.appendln(s); :};
item ::= BLOCK_COMMENT:s {: writer.appendln(s); :};

// TAGS
item ::= PROGRAMME_DOMUS_OPEN_TAG:s {: writer.createFile(); :};
item ::= PROGRAMME_DOMUS_CLOSE_TAG:s {: :};

item ::= DECLARATION_APPAREILS_OPEN_TAG:s {: :};
item ::= DECLARATION_APPAREILS_CLOSE_TAG:s {: :};

item ::= DECLARATION_INTERFACE_OPEN_TAG:s {: :};
item ::= DECLARATION_INTERFACE_CLOSE_TAG:s {: :};

item ::= DECLARATION_SCENARII_OPEN_TAG:s {: :};
item ::= DECLARATION_SCENARII_CLOSE_TAG:s {: :};

item ::= SCENARIO_OPEN_TAG:s {:
	table.put("SCENARIO", Utils.retrieveName(s));
	writer.append("String " + Utils.retrieveName(s) + "_contenu = \"\\n");
:};
item ::= SCENARIO_CLOSE_TAG:s {:
	String scenario = table.get("SCENARIO");
	writer.appendln("\";");
	writer.appendln("CScenario " + scenario + " = new CScenario(\"" + scenario + "\", " + scenario + "_contenu);");
	writer.appendln("ma_liste_scenarios.add(" + scenario + ");");

	table.remove("SCENARIO");
:};

item ::= DECLARATION_COMMANDES_OPEN_TAG:s {: :};
item ::= DECLARATION_COMMANDES_CLOSE_TAG:s {: :};

appareils ::= 
	  ECLAIRAGE:a {: RESULT = a; :} 
	| VOLET:a {: RESULT = a; :}
	| CHAUFFAGE:a {: RESULT = a; :}
	| ALARME:a {: RESULT = a; :}
	| FENETRE:a {: RESULT = a; :};

autre_appareils ::= 
	  TABLETTE:ap {: RESULT = "tablette"; :}
	| TV:ap {: RESULT = "tv"; :}
	| HIFI:ap {: RESULT = "hifi"; :}
	| CAFETIERE:ap {: RESULT = "cafe"; :}
	| VIDEO_PROJ:ap {: RESULT = "video_proj"; :}
	| LAVE_VAISSELLE:ap {: RESULT = "lave_vaisselle"; :}
	| LAVE_LINGE:ap {: RESULT = "lave_linge"; :}
	| SECHE_LINGE:ap {: RESULT = "seche_linge"; :}
	| ORDINATEUR:ap {: RESULT = "ordinateur"; :}
	| PORTAIL:ap {: RESULT = "portail"; :};

interfaces ::= 
	  INTERRUPTEUR:i {: RESULT = i; :}
	| MOBILE:i {: RESULT = i; :}
	| TELEPHONE:i {: RESULT = i; :}
	| TELECOMMANDE:i {: RESULT = i; :};

actions ::=
      OUVRIR:a {: RESULT = a; :}
	| FERMER:a {: RESULT = a; :} 
	| ETEINDRE:a {: RESULT = a; :} 
	| ALLUMER :a {: RESULT = a; :}
	| TAMISER:a {: RESULT = a; :}
	| ALLUMER_PARTIEL:a {: RESULT = a; :}
	| ALLUMER_ECO:a {: RESULT = a; :}
	| OUVRIR_PARTIEL:a {: RESULT = a; :};

states ::=
	  ALLUME :s {: RESULT = s; :}
	| ETEINT:s {: RESULT = s; :}
	| DEMI:s {: RESULT = s; :}
	| ECO:s {: RESULT = s; :}
	| OUVERT:s {: RESULT = s; :}
	| FERME:s {: RESULT = s; :};

pourtout_subitem ::=
	  appareils:a {::}
	| IDENTIFIER:a {::} 
	| AUTRE_APPAREIL {::}
	| AUTRE_APPAREIL PARANTHESES_OPEN autre_appareils:ap PARANTHESES_CLOSE {::};

pourtout_action ::=
	  IDENTIFIER:id2 DOT actions:app_action
	| MESSAGE PARANTHESES_OPEN message_subitem PARANTHESES_CLOSE {::};

si_subitem ::=
	  IDENTIFIER:id DOT actions:app_action {::}
	| MESSAGE PARANTHESES_OPEN message_subitem PARANTHESES_CLOSE {::};

sinon_subitem ::=
	  IDENTIFIER:id DOT actions:app_action {::}
	| MESSAGE PARANTHESES_OPEN message_subitem PARANTHESES_CLOSE {::};

message_subitem ::=
	  STRING_LITERAL:s {::}
	| STRING_LITERAL:s COMMA IDENTIFIER:id message_subitem {::}
	| STRING_LITERAL:s COMMA IDENTIFIER:id DOT ETAT message_subitem {::}
	| {::};



item ::= appareils:a appareils_subitem {:
	// TODO Update class name for VOLET to VoletFENETRE
	String appareils = (String) a;
	String className = "C" + appareils.substring(0, 1).toUpperCase() + appareils.substring(1);
	while(!stack.isEmpty()) {
		String identifier = stack.pop();
		writer.appendln(className + " " + identifier + " = new " + className + "(\"" + identifier + "\", TypeAppareil." + appareils.toUpperCase() + ");");
		writer.appendln("ma_liste_appareils.add(" + identifier + ");");
	}
:};
appareils_subitem ::=
	  IDENTIFIER:id DOT {: stack.push(id); :}
	| IDENTIFIER:id COMMA appareils_subitem {: stack.push(id); :};


item ::= AUTRE_APPAREIL PARANTHESES_OPEN autre_appareils:ap PARANTHESES_CLOSE autre_appareils_subitem {:
	String appareils = (String) ap;
	while(!stack.isEmpty()) {
		String identifier = stack.pop();
		writer.appendln("CAutreAppareil " + identifier + " = new CAutreAppareil(\"" + identifier + "\", TypeAppareil.AUTRE_APPAREIL_" + appareils.toUpperCase() + ");");
		writer.appendln("ma_liste_appareils.add(" + identifier + ");");
	}
:};
autre_appareils_subitem ::=
	  IDENTIFIER:id DOT {: stack.push(id); :}
	| IDENTIFIER:id COMMA autre_appareils_subitem {: stack.push(id); :};


item::= DEFINIR IDENTIFIER:id ASSIGN CURLY_BRACKET_OPEN definir_subitem CURLY_BRACKET_CLOSE DOT {:
	writer.appendln("CEnsAppareil " + id + " = new CAutreAppareil(\"" + id + "\");");
	while(!stack.isEmpty()) {
		String identifier = stack.pop();
		writer.appendln(id + ".add(" + identifier + ");");
	}
	writer.appendln("ma_liste_ens_appareils.add(" + id + ");");
:};
definir_subitem ::=
	  IDENTIFIER:id {: stack.push(id); :}
	| IDENTIFIER:id COMMA definir_subitem {: stack.push(id); :};

item ::= interfaces:i interfaces_subitem {:
	String interfaceName = (String) i;
	while(!stack.isEmpty()) {
		String identifier = stack.pop();
		writer.appendln("CInterface " + identifier + " = new CInterface(\"" + identifier + "\", TypeInterface." + interfaceName.toUpperCase() + ");");
		writer.appendln("ma_liste_interfaces.add(" + identifier + ");");
	}
:};
interfaces_subitem ::=
	  IDENTIFIER:id DOT {: stack.push(id); :}
	| IDENTIFIER:id COMMA interfaces_subitem {: stack.push(id); :};


item ::= POURTOUT IDENTIFIER:id1 COLON pourtout_subitem FAIRE pourtout_action SEMI_COLON FAIT SEMI_COLON {::};

item ::= IDENTIFIER:id DOT actions:app_action SEMI_COLON {::};
// TO BE UPDATED THIS PART
item ::= SI PARANTHESES_OPEN item EQUALS states:state PARANTHESES_CLOSE ALORS si_subitem SEMI_COLON {::};
item ::= SINON sinon_subitem SEMI_COLON FSI SEMI_COLON {::};


item ::= IDENTIFIER:id DOT ETAT {::};
item ::= IDENTIFIER:id DOT states:app_state SEMI_COLON {::};
item ::= FSI SEMI_COLON {::};

item ::= EXECUTOR_SCENARIO IDENTIFIER:id SEMI_COLON {::};

item ::= MESSAGE PARANTHESES_OPEN message_subitem PARANTHESES_CLOSE SEMI_COLON {::};

item ::= ASSOCIER IDENTIFIER:id ASSIGN associer_subitem DOT {:
	while(!stack.isEmpty()) {
		String scenario = stack.pop();
		writer.appendln(id + ".addScenarioAssocie(\"" + scenario +"\");");
	}
:};
associer_subitem ::=
	  IDENTIFIER:id {: stack.push(id); :}
	| IDENTIFIER:id COMMA associer_subitem {: stack.push(id); :}
	| CURLY_BRACKET_OPEN associer_subitem CURLY_BRACKET_CLOSE {::}
	| {::};

item ::= PROGRAMMER IDENTIFIER:id ASSIGN programmer_subset DOT {:
	writer.appendln("CProgrammation p = new CProgrammation(\"" + id + "\");");
	while(!stack.isEmpty()) {
		writer.appendln("CDate pd = new CDate" + stack.pop() + ";");
	}
:};
programmer_subset ::=
	  DATE:date {: stack.push(Utils.fixDate(date)); :}
	| DATE:date COMMA programmer_subset {: stack.push(Utils.fixDate(date)); :}
	| CURLY_BRACKET_OPEN programmer_subset CURLY_BRACKET_CLOSE {::};
