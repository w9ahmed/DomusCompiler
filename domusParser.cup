import java_cup.runtime.*;
import java.util.Stack;

parser code {:
	public static void main(String args[]) throws Exception {
		new parser(new Yylex(System.in)).parse();
	}
	
	public void syntax_error(Symbol s){
    	System.out.println("compiler has detected a syntax error at line " + s.left + " column " + s.right);
	}
:}

action code {:
	Stack<Token> stack = new Stack();
	Writer writer = new Writer("CMaisonUser.java");
:}

terminal PROGRAMME_DOMUS_OPEN_TAG, PROGRAMME_DOMUS_CLOSE_TAG,
 DECLARATION_APPAREILS_OPEN_TAG, DECLARATION_APPAREILS_CLOSE_TAG,
 DECLARATION_INTERFACE_OPEN_TAG, DECLARATION_INTERFACE_CLOSE_TAG,
 DECLARATION_SCENARII_OPEN_TAG, DECLARATION_SCENARII_CLOSE_TAG,
 DECLARATION_COMMANDES_OPEN_TAG, DECLARATION_COMMANDES_CLOSE_TAG,
 
 DEFINIR, EXECUTOR_SCENARIO, ASSOCIER, PROGRAMMER, MESSAGE, POURTOUT,
 FAIRE, FAIT, SI, ALORS, SINON, FSI, OUVERIR, FERMER, ETEINDRE, ALLUMER,
 TASMISER, ETAT, ALLUMER_PARTIEL, ALLUMER_ECO, OUVERIR_PARTIEL, ALLUME, ETEIN,
 DEMI, ECO, OUVERT, FERME, ECLAIRAGE, VOLET, CHAUFFAGE, ALARME, FENETRE, AUTRE_APPAREIL,
 INTERRUPTEUR, MOBILE, TELEPHONE, TELECOMMANDE, TABLETTE, TV, HIFI, CAFETIERE, VIDEO_PROJ,
 LAVE_VAISSELLE, LAVE_LINGE, SECHE_LINGE, ORDINATEUR, PORTAIL,

 DOT, COMMA, COLON, ASSIGN, SEMI_COLON, CURLY_BRACKET_OPEN, CURLY_BRACKET_CLOSE, EQUALS, PARANTHESES_OPEN, PARANTHESES_CLOSE;

terminal String SCENARIO_OPEN_TAG,SCENARIO_CLOSE_TAG, IDENTIFIER, LINE_COMMENT, BLOCK_COMMENT;

non terminal expr, list, item;

expr	::= list {:
	System.out.println("\n\nAnalyse terminee!");
:} | {: System.out.println("Entree vide!"); :};

list ::= item list | item;

// COMMENTS
item ::= LINE_COMMENT:s {: writer.appendln(s); :};
item ::= BLOCK_COMMENT:s {: writer.appendln(s); :};

// TAGS
item ::= PROGRAMME_DOMUS_OPEN_TAG:s {:
	if(!stack.isEmpty()) {
		throw new Exception("DOMUS program should start with PROGRAMME_DOMUS_OPEN_TAG");
	}

	stack.push(new Token("PROGRAMME_DOMUS_OPEN_TAG", null));
	writer.createFile();
:};
item ::= PROGRAMME_DOMUS_CLOSE_TAG:s {: 
	if(stack.isEmpty() || stack.pop().getName() != "PROGRAMME_DOMUS_OPEN_TAG") {
		throw new Exception("Missing PROGRAMME_DOMUS_OPEN_TAG");
	}
:};

item ::= DECLARATION_APPAREILS_OPEN_TAG:s {: 
	System.out.println();
	stack.push(new Token("DECLARATION_APPAREILS_OPEN_TAG", null));
:};
item ::= DECLARATION_APPAREILS_CLOSE_TAG:s {:
	if(stack.isEmpty() || stack.pop().getName() != "DECLARATION_APPAREILS_OPEN_TAG") {
		throw new Exception("Missing DECLARATION_APPAREILS_OPEN_TAG");
	}
:};

item ::= DECLARATION_INTERFACE_OPEN_TAG:s {:
	System.out.println();
	stack.push(new Token("DECLARATION_INTERFACE_OPEN_TAG", null));
:};
item ::= DECLARATION_INTERFACE_CLOSE_TAG:s {:
	if(stack.isEmpty() || stack.pop().getName() != "DECLARATION_INTERFACE_OPEN_TAG") {
		throw new Exception("Missing DECLARATION_INTERFACE_OPEN_TAG");
	}
:};

item ::= DECLARATION_SCENARII_OPEN_TAG:s {:
	System.out.println();
	stack.push(new Token("DECLARATION_SCENARII_OPEN_TAG", null));
:};
item ::= DECLARATION_SCENARII_CLOSE_TAG:s {:
	if(stack.isEmpty() || stack.pop().getName() != "DECLARATION_SCENARII_OPEN_TAG") {
		throw new Exception("Missing DECLARATION_SCENARII_OPEN_TAG");
	}
:};

item ::= SCENARIO_OPEN_TAG:s {:
	System.out.println();
	stack.push(new Token("SCENARIO_OPEN_TAG", null));
:};
item ::= SCENARIO_CLOSE_TAG:s {:
	if(stack.isEmpty() || stack.pop().getName() != "SCENARIO_OPEN_TAG") {
		throw new Exception("Missing SCENARIO_OPEN_TAG");
	}
:};

item ::= DECLARATION_COMMANDES_OPEN_TAG:s {:
	System.out.println();
	stack.push(new Token("DECLARATION_COMMANDES_OPEN_TAG", null));
:};
item ::= DECLARATION_COMMANDES_CLOSE_TAG:s {:
	if(stack.isEmpty() || stack.pop().getName() != "DECLARATION_COMMANDES_OPEN_TAG") {
		throw new Exception("Missing DECLARATION_COMMANDES_OPEN_TAG");
	}
:};

// PUNCTUATIONS
item ::= COMMA {:
	stack.pop();
:};
item ::= DOT {: stack.pop(); :};
item ::= ASSIGN {::};

item ::= CURLY_BRACKET_OPEN {:
	stack.push(new Token("{", null));
:};
item ::= CURLY_BRACKET_CLOSE {:
	if(stack.isEmpty() || stack.pop().getName() != "{") {
		throw new Exception("Missing curly bracket {");
	}
:};

item ::= PARANTHESES_OPEN {:
	stack.push(new Token("(", null));
:};
item ::= PARANTHESES_CLOSE {:
	if(stack.isEmpty() || stack.pop().getName() != "(") {
		throw new Exception("Missing paranthese (");
	}
:};

// CLASSES
item ::= ECLAIRAGE:n {:
	stack.push(new Token("CEclairage", "TYPE_APPAREIL." + ((String) n).toUpperCase()));
:};
item ::= VOLET:n {:
	stack.push(new Token("CVoletFenetre", "TYPE_APPAREIL." + ((String) n).toUpperCase()));
:};
item ::= CHAUFFAGE:n {:
	stack.push(new Token("CChauffage", "TYPE_APPAREIL." + ((String) n).toUpperCase()));
:};
item ::= ALARME:n {:
	stack.push(new Token("CAlarme", "TYPE_APPAREIL." + ((String) n).toUpperCase()));
:};
item ::= FENETRE:n {:
	stack.push(new Token("CVoletFenetre", "TYPE_APPAREIL." + ((String) n).toUpperCase()));
:};
item ::= AUTRE_APPAREIL:n {:
	stack.push(new Token("CAutreAppareil", "TYPE_APPAREIL." + ((String) n).toUpperCase()));
:};

item ::= CAFETIERE {:
	// typeClass += "_CAFE";
:};
item ::= HIFI {:
	// typeClass += "_HIFI";
:};



// keys
item ::= DEFINIR {:
	if(stack.contains("DECLARATION_APPAREILS_OPEN_TAG")) {
		stack.push(new Token("CEnsAppareil", null));
	}
:};


item ::= IDENTIFIER:s {:
	Token t = stack.peek();
	stack.push(new Token(s, null));

	writer.append(t.getName() + " " + s + " = new " + t.getName());
	writer.appendln("(\"" + s + "\", " + t.getValue() + ");");
	writer.appendln("ma_liste_appareils.add(" + s + ");");
	// identifierStack.push(s);
	
	// if(currentClass != "") {
	// 	if(identifierStack.size() < 2) {
	// 		append(currentClass + " " + s + " = new " + currentClass);
	// 	}

	// 	if(currentClass == "CEnsAppareil") {
	// 		appendln(identifierStack.get(0) + ".addAppareil(" + s + ");");
	// 	} else {
			// appendln("(\"" + s + "\", " + typeClass + ");");
			// appendln("ma_liste_appareils.add(" + identifierStack.get(0) + ");");
	// 	}
	// }
:};

